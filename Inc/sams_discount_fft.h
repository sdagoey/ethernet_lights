#ifndef __SAMS_FFT__
#define __SAMS_FFT__

float** fft_stage(float x_in[][2]);

static float sam_twiddleCoef_4[8] = {
        1.000000000f,  0.000000000f,
        0.000000000f,  -1.00000000f,
        -1.00000000f,  0.000000000f,
        0.000000000f,  1.000000000f,
};

/*
* @brief  Floating-point Twiddle factors Table Generation
*/

static float sam_twiddleCoef_8[16] = {
        1.000000000f,  0.000000000f,
        0.70711f , 0.70711f,
        0.0f,         -1.0f,
        -0.70711f , 0.70711f,
        -0.70711f ,  0.70711f,
        -0.70711f ,  0.70711f,
        0.0f , 1.0f,
        0.70711f , 0.70711f,

};

/**
* \par
* Example code for Floating-point Twiddle factors Generation:
* \par
* <pre>for(i = 0; i< N/; i++)
* {
*   sam_twiddleCoef[2*i]= cos(i * 2*PI/(float)N);
*   sam_twiddleCoef[2*i+1]= sin(i * 2*PI/(float)N);
* } </pre>
* \par
* where N = 16  and PI = 3.14159265358979
* \par
* Cos and Sin values are in interleaved fashion
*
*/
static float sam_twiddleCoef_16[32] = {
    1.000000000f,  0.000000000f,
    0.923879533f,  0.382683432f,
    0.707106781f,  0.707106781f,
    0.382683432f,  0.923879533f,
    0.000000000f,  1.000000000f,
   -0.382683432f,  0.923879533f,
   -0.707106781f,  0.707106781f,
   -0.923879533f,  0.382683432f,
   -1.000000000f,  0.000000000f,
   -0.923879533f, -0.382683432f,
   -0.707106781f, -0.707106781f,
   -0.382683432f, -0.923879533f,
   -0.000000000f, -1.000000000f,
    0.382683432f, -0.923879533f,
    0.707106781f, -0.707106781f,
    0.923879533f, -0.382683432f
};

/**
* \par
* Example code for Floating-point Twiddle factors Generation:
* \par
* <pre>for(i = 0; i< N/; i++)
* {
*   sam_twiddleCoef[2*i]= cos(i * 2*PI/(float)N);
*   sam_twiddleCoef[2*i+1]= sin(i * 2*PI/(float)N);
* } </pre>
* \par
* where N = 32  and PI = 3.14159265358979
* \par
* Cos and Sin values are in interleaved fashion
*
*/
static float sam_twiddleCoef_32[64] = {
    1.000000000f,  0.000000000f,
    0.980785280f,  0.195090322f,
    0.923879533f,  0.382683432f,
    0.831469612f,  0.555570233f,
    0.707106781f,  0.707106781f,
    0.555570233f,  0.831469612f,
    0.382683432f,  0.923879533f,
    0.195090322f,  0.980785280f,
    0.000000000f,  1.000000000f,
   -0.195090322f,  0.980785280f,
   -0.382683432f,  0.923879533f,
   -0.555570233f,  0.831469612f,
   -0.707106781f,  0.707106781f,
   -0.831469612f,  0.555570233f,
   -0.923879533f,  0.382683432f,
   -0.980785280f,  0.195090322f,
   -1.000000000f,  0.000000000f,
   -0.980785280f, -0.195090322f,
   -0.923879533f, -0.382683432f,
   -0.831469612f, -0.555570233f,
   -0.707106781f, -0.707106781f,
   -0.555570233f, -0.831469612f,
   -0.382683432f, -0.923879533f,
   -0.195090322f, -0.980785280f,
   -0.000000000f, -1.000000000f,
    0.195090322f, -0.980785280f,
    0.382683432f, -0.923879533f,
    0.555570233f, -0.831469612f,
    0.707106781f, -0.707106781f,
    0.831469612f, -0.555570233f,
    0.923879533f, -0.382683432f,
    0.980785280f, -0.195090322f
};

/**
* \par
* Example code for Floating-point Twiddle factors Generation:
* \par
* <pre>for(i = 0; i< N/; i++)
* {
*   sam_twiddleCoef[2*i]= cos(i * 2*PI/(float)N);
*   sam_twiddleCoef[2*i+1]= sin(i * 2*PI/(float)N);
* } </pre>
* \par
* where N = 64  and PI = 3.14159265358979
* \par
* Cos and Sin values are in interleaved fashion
*
*/
static float sam_twiddleCoef_64[128] = {
    1.000000000f,  0.000000000f,
    0.995184727f,  0.098017140f,
    0.980785280f,  0.195090322f,
    0.956940336f,  0.290284677f,
    0.923879533f,  0.382683432f,
    0.881921264f,  0.471396737f,
    0.831469612f,  0.555570233f,
    0.773010453f,  0.634393284f,
    0.707106781f,  0.707106781f,
    0.634393284f,  0.773010453f,
    0.555570233f,  0.831469612f,
    0.471396737f,  0.881921264f,
    0.382683432f,  0.923879533f,
    0.290284677f,  0.956940336f,
    0.195090322f,  0.980785280f,
    0.098017140f,  0.995184727f,
    0.000000000f,  1.000000000f,
   -0.098017140f,  0.995184727f,
   -0.195090322f,  0.980785280f,
   -0.290284677f,  0.956940336f,
   -0.382683432f,  0.923879533f,
   -0.471396737f,  0.881921264f,
   -0.555570233f,  0.831469612f,
   -0.634393284f,  0.773010453f,
   -0.707106781f,  0.707106781f,
   -0.773010453f,  0.634393284f,
   -0.831469612f,  0.555570233f,
   -0.881921264f,  0.471396737f,
   -0.923879533f,  0.382683432f,
   -0.956940336f,  0.290284677f,
   -0.980785280f,  0.195090322f,
   -0.995184727f,  0.098017140f,
   -1.000000000f,  0.000000000f,
   -0.995184727f, -0.098017140f,
   -0.980785280f, -0.195090322f,
   -0.956940336f, -0.290284677f,
   -0.923879533f, -0.382683432f,
   -0.881921264f, -0.471396737f,
   -0.831469612f, -0.555570233f,
   -0.773010453f, -0.634393284f,
   -0.707106781f, -0.707106781f,
   -0.634393284f, -0.773010453f,
   -0.555570233f, -0.831469612f,
   -0.471396737f, -0.881921264f,
   -0.382683432f, -0.923879533f,
   -0.290284677f, -0.956940336f,
   -0.195090322f, -0.980785280f,
   -0.098017140f, -0.995184727f,
   -0.000000000f, -1.000000000f,
    0.098017140f, -0.995184727f,
    0.195090322f, -0.980785280f,
    0.290284677f, -0.956940336f,
    0.382683432f, -0.923879533f,
    0.471396737f, -0.881921264f,
    0.555570233f, -0.831469612f,
    0.634393284f, -0.773010453f,
    0.707106781f, -0.707106781f,
    0.773010453f, -0.634393284f,
    0.831469612f, -0.555570233f,
    0.881921264f, -0.471396737f,
    0.923879533f, -0.382683432f,
    0.956940336f, -0.290284677f,
    0.980785280f, -0.195090322f,
    0.995184727f, -0.098017140f
};

/**
* \par
* Example code for Floating-point Twiddle factors Generation:
* \par
* <pre>for(i = 0; i< N/; i++)
* {
*   sam_twiddleCoef[2*i]= cos(i * 2*PI/(float)N);
*   sam_twiddleCoef[2*i+1]= sin(i * 2*PI/(float)N);
* } </pre>
* \par
* where N = 128 and PI = 3.14159265358979
* \par
* Cos and Sin values are in interleaved fashion
*
*/

static float sam_twiddleCoef_128[256] = {
    1.000000000f    ,   0.000000000f    ,
    0.998795456f    ,   0.049067674f    ,
    0.995184727f    ,   0.098017140f    ,
    0.989176510f    ,   0.146730474f    ,
    0.980785280f    ,   0.195090322f    ,
    0.970031253f    ,   0.242980180f    ,
    0.956940336f    ,   0.290284677f    ,
    0.941544065f    ,   0.336889853f    ,
    0.923879533f    ,   0.382683432f    ,
    0.903989293f    ,   0.427555093f    ,
    0.881921264f    ,   0.471396737f    ,
    0.857728610f    ,   0.514102744f    ,
    0.831469612f    ,   0.555570233f    ,
    0.803207531f    ,   0.595699304f    ,
    0.773010453f    ,   0.634393284f    ,
    0.740951125f    ,   0.671558955f    ,
    0.707106781f    ,   0.707106781f    ,
    0.671558955f    ,   0.740951125f    ,
    0.634393284f    ,   0.773010453f    ,
    0.595699304f    ,   0.803207531f    ,
    0.555570233f    ,   0.831469612f    ,
    0.514102744f    ,   0.857728610f    ,
    0.471396737f    ,   0.881921264f    ,
    0.427555093f    ,   0.903989293f    ,
    0.382683432f    ,   0.923879533f    ,
    0.336889853f    ,   0.941544065f    ,
    0.290284677f    ,   0.956940336f    ,
    0.242980180f    ,   0.970031253f    ,
    0.195090322f    ,   0.980785280f    ,
    0.146730474f    ,   0.989176510f    ,
    0.098017140f    ,   0.995184727f    ,
    0.049067674f    ,   0.998795456f    ,
    0.000000000f    ,   1.000000000f    ,
    -0.049067674f   ,   0.998795456f    ,
    -0.098017140f   ,   0.995184727f    ,
    -0.146730474f   ,   0.989176510f    ,
    -0.195090322f   ,   0.980785280f    ,
    -0.242980180f   ,   0.970031253f    ,
    -0.290284677f   ,   0.956940336f    ,
    -0.336889853f   ,   0.941544065f    ,
    -0.382683432f   ,   0.923879533f    ,
    -0.427555093f   ,   0.903989293f    ,
    -0.471396737f   ,   0.881921264f    ,
    -0.514102744f   ,   0.857728610f    ,
    -0.555570233f   ,   0.831469612f    ,
    -0.595699304f   ,   0.803207531f    ,
    -0.634393284f   ,   0.773010453f    ,
    -0.671558955f   ,   0.740951125f    ,
    -0.707106781f   ,   0.707106781f    ,
    -0.740951125f   ,   0.671558955f    ,
    -0.773010453f   ,   0.634393284f    ,
    -0.803207531f   ,   0.595699304f    ,
    -0.831469612f   ,   0.555570233f    ,
    -0.857728610f   ,   0.514102744f    ,
    -0.881921264f   ,   0.471396737f    ,
    -0.903989293f   ,   0.427555093f    ,
    -0.923879533f   ,   0.382683432f    ,
    -0.941544065f   ,   0.336889853f    ,
    -0.956940336f   ,   0.290284677f    ,
    -0.970031253f   ,   0.242980180f    ,
    -0.980785280f   ,   0.195090322f    ,
    -0.989176510f   ,   0.146730474f    ,
    -0.995184727f   ,   0.098017140f    ,
    -0.998795456f   ,   0.049067674f    ,
    -1.000000000f   ,   0.000000000f    ,
    -0.998795456f   ,   -0.049067674f   ,
    -0.995184727f   ,   -0.098017140f   ,
    -0.989176510f   ,   -0.146730474f   ,
    -0.980785280f   ,   -0.195090322f   ,
    -0.970031253f   ,   -0.242980180f   ,
    -0.956940336f   ,   -0.290284677f   ,
    -0.941544065f   ,   -0.336889853f   ,
    -0.923879533f   ,   -0.382683432f   ,
    -0.903989293f   ,   -0.427555093f   ,
    -0.881921264f   ,   -0.471396737f   ,
    -0.857728610f   ,   -0.514102744f   ,
    -0.831469612f   ,   -0.555570233f   ,
    -0.803207531f   ,   -0.595699304f   ,
    -0.773010453f   ,   -0.634393284f   ,
    -0.740951125f   ,   -0.671558955f   ,
    -0.707106781f   ,   -0.707106781f   ,
    -0.671558955f   ,   -0.740951125f   ,
    -0.634393284f   ,   -0.773010453f   ,
    -0.595699304f   ,   -0.803207531f   ,
    -0.555570233f   ,   -0.831469612f   ,
    -0.514102744f   ,   -0.857728610f   ,
    -0.471396737f   ,   -0.881921264f   ,
    -0.427555093f   ,   -0.903989293f   ,
    -0.382683432f   ,   -0.923879533f   ,
    -0.336889853f   ,   -0.941544065f   ,
    -0.290284677f   ,   -0.956940336f   ,
    -0.242980180f   ,   -0.970031253f   ,
    -0.195090322f   ,   -0.980785280f   ,
    -0.146730474f   ,   -0.989176510f   ,
    -0.098017140f   ,   -0.995184727f   ,
    -0.049067674f   ,   -0.998795456f   ,
    -0.000000000f   ,   -1.000000000f   ,
    0.049067674f    ,   -0.998795456f   ,
    0.098017140f    ,   -0.995184727f   ,
    0.146730474f    ,   -0.989176510f   ,
    0.195090322f    ,   -0.980785280f   ,
    0.242980180f    ,   -0.970031253f   ,
    0.290284677f    ,   -0.956940336f   ,
    0.336889853f    ,   -0.941544065f   ,
    0.382683432f    ,   -0.923879533f   ,
    0.427555093f    ,   -0.903989293f   ,
    0.471396737f    ,   -0.881921264f   ,
    0.514102744f    ,   -0.857728610f   ,
    0.555570233f    ,   -0.831469612f   ,
    0.595699304f    ,   -0.803207531f   ,
    0.634393284f    ,   -0.773010453f   ,
    0.671558955f    ,   -0.740951125f   ,
    0.707106781f    ,   -0.707106781f   ,
    0.740951125f    ,   -0.671558955f   ,
    0.773010453f    ,   -0.634393284f   ,
    0.803207531f    ,   -0.595699304f   ,
    0.831469612f    ,   -0.555570233f   ,
    0.857728610f    ,   -0.514102744f   ,
    0.881921264f    ,   -0.471396737f   ,
    0.903989293f    ,   -0.427555093f   ,
    0.923879533f    ,   -0.382683432f   ,
    0.941544065f    ,   -0.336889853f   ,
    0.956940336f    ,   -0.290284677f   ,
    0.970031253f    ,   -0.242980180f   ,
    0.980785280f    ,   -0.195090322f   ,
    0.989176510f    ,   -0.146730474f   ,
    0.995184727f    ,   -0.098017140f   ,
    0.998795456f    ,   -0.049067674f
};
/**
* \par
* Example code for Floating-point Twiddle factors Generation:
* \par
* <pre>for(i = 0; i< N/; i++)
* {
*   sam_twiddleCoef[2*i]= cos(i * 2*PI/(float)N);
*   sam_twiddleCoef[2*i+1]= sin(i * 2*PI/(float)N);
* } </pre>
* \par
* where N = 256 and PI = 3.14159265358979
* \par
* Cos and Sin values are in interleaved fashion
*
*/
static float sam_twiddleCoef_256[512] = {
    1.000000000f,  0.000000000f,
    0.999698819f,  0.024541229f,
    0.998795456f,  0.049067674f,
    0.997290457f,  0.073564564f,
    0.995184727f,  0.098017140f,
    0.992479535f,  0.122410675f,
    0.989176510f,  0.146730474f,
    0.985277642f,  0.170961889f,
    0.980785280f,  0.195090322f,
    0.975702130f,  0.219101240f,
    0.970031253f,  0.242980180f,
    0.963776066f,  0.266712757f,
    0.956940336f,  0.290284677f,
    0.949528181f,  0.313681740f,
    0.941544065f,  0.336889853f,
    0.932992799f,  0.359895037f,
    0.923879533f,  0.382683432f,
    0.914209756f,  0.405241314f,
    0.903989293f,  0.427555093f,
    0.893224301f,  0.449611330f,
    0.881921264f,  0.471396737f,
    0.870086991f,  0.492898192f,
    0.857728610f,  0.514102744f,
    0.844853565f,  0.534997620f,
    0.831469612f,  0.555570233f,
    0.817584813f,  0.575808191f,
    0.803207531f,  0.595699304f,
    0.788346428f,  0.615231591f,
    0.773010453f,  0.634393284f,
    0.757208847f,  0.653172843f,
    0.740951125f,  0.671558955f,
    0.724247083f,  0.689540545f,
    0.707106781f,  0.707106781f,
    0.689540545f,  0.724247083f,
    0.671558955f,  0.740951125f,
    0.653172843f,  0.757208847f,
    0.634393284f,  0.773010453f,
    0.615231591f,  0.788346428f,
    0.595699304f,  0.803207531f,
    0.575808191f,  0.817584813f,
    0.555570233f,  0.831469612f,
    0.534997620f,  0.844853565f,
    0.514102744f,  0.857728610f,
    0.492898192f,  0.870086991f,
    0.471396737f,  0.881921264f,
    0.449611330f,  0.893224301f,
    0.427555093f,  0.903989293f,
    0.405241314f,  0.914209756f,
    0.382683432f,  0.923879533f,
    0.359895037f,  0.932992799f,
    0.336889853f,  0.941544065f,
    0.313681740f,  0.949528181f,
    0.290284677f,  0.956940336f,
    0.266712757f,  0.963776066f,
    0.242980180f,  0.970031253f,
    0.219101240f,  0.975702130f,
    0.195090322f,  0.980785280f,
    0.170961889f,  0.985277642f,
    0.146730474f,  0.989176510f,
    0.122410675f,  0.992479535f,
    0.098017140f,  0.995184727f,
    0.073564564f,  0.997290457f,
    0.049067674f,  0.998795456f,
    0.024541229f,  0.999698819f,
    0.000000000f,  1.000000000f,
   -0.024541229f,  0.999698819f,
   -0.049067674f,  0.998795456f,
   -0.073564564f,  0.997290457f,
   -0.098017140f,  0.995184727f,
   -0.122410675f,  0.992479535f,
   -0.146730474f,  0.989176510f,
   -0.170961889f,  0.985277642f,
   -0.195090322f,  0.980785280f,
   -0.219101240f,  0.975702130f,
   -0.242980180f,  0.970031253f,
   -0.266712757f,  0.963776066f,
   -0.290284677f,  0.956940336f,
   -0.313681740f,  0.949528181f,
   -0.336889853f,  0.941544065f,
   -0.359895037f,  0.932992799f,
   -0.382683432f,  0.923879533f,
   -0.405241314f,  0.914209756f,
   -0.427555093f,  0.903989293f,
   -0.449611330f,  0.893224301f,
   -0.471396737f,  0.881921264f,
   -0.492898192f,  0.870086991f,
   -0.514102744f,  0.857728610f,
   -0.534997620f,  0.844853565f,
   -0.555570233f,  0.831469612f,
   -0.575808191f,  0.817584813f,
   -0.595699304f,  0.803207531f,
   -0.615231591f,  0.788346428f,
   -0.634393284f,  0.773010453f,
   -0.653172843f,  0.757208847f,
   -0.671558955f,  0.740951125f,
   -0.689540545f,  0.724247083f,
   -0.707106781f,  0.707106781f,
   -0.724247083f,  0.689540545f,
   -0.740951125f,  0.671558955f,
   -0.757208847f,  0.653172843f,
   -0.773010453f,  0.634393284f,
   -0.788346428f,  0.615231591f,
   -0.803207531f,  0.595699304f,
   -0.817584813f,  0.575808191f,
   -0.831469612f,  0.555570233f,
   -0.844853565f,  0.534997620f,
   -0.857728610f,  0.514102744f,
   -0.870086991f,  0.492898192f,
   -0.881921264f,  0.471396737f,
   -0.893224301f,  0.449611330f,
   -0.903989293f,  0.427555093f,
   -0.914209756f,  0.405241314f,
   -0.923879533f,  0.382683432f,
   -0.932992799f,  0.359895037f,
   -0.941544065f,  0.336889853f,
   -0.949528181f,  0.313681740f,
   -0.956940336f,  0.290284677f,
   -0.963776066f,  0.266712757f,
   -0.970031253f,  0.242980180f,
   -0.975702130f,  0.219101240f,
   -0.980785280f,  0.195090322f,
   -0.985277642f,  0.170961889f,
   -0.989176510f,  0.146730474f,
   -0.992479535f,  0.122410675f,
   -0.995184727f,  0.098017140f,
   -0.997290457f,  0.073564564f,
   -0.998795456f,  0.049067674f,
   -0.999698819f,  0.024541229f,
   -1.000000000f,  0.000000000f,
   -0.999698819f, -0.024541229f,
   -0.998795456f, -0.049067674f,
   -0.997290457f, -0.073564564f,
   -0.995184727f, -0.098017140f,
   -0.992479535f, -0.122410675f,
   -0.989176510f, -0.146730474f,
   -0.985277642f, -0.170961889f,
   -0.980785280f, -0.195090322f,
   -0.975702130f, -0.219101240f,
   -0.970031253f, -0.242980180f,
   -0.963776066f, -0.266712757f,
   -0.956940336f, -0.290284677f,
   -0.949528181f, -0.313681740f,
   -0.941544065f, -0.336889853f,
   -0.932992799f, -0.359895037f,
   -0.923879533f, -0.382683432f,
   -0.914209756f, -0.405241314f,
   -0.903989293f, -0.427555093f,
   -0.893224301f, -0.449611330f,
   -0.881921264f, -0.471396737f,
   -0.870086991f, -0.492898192f,
   -0.857728610f, -0.514102744f,
   -0.844853565f, -0.534997620f,
   -0.831469612f, -0.555570233f,
   -0.817584813f, -0.575808191f,
   -0.803207531f, -0.595699304f,
   -0.788346428f, -0.615231591f,
   -0.773010453f, -0.634393284f,
   -0.757208847f, -0.653172843f,
   -0.740951125f, -0.671558955f,
   -0.724247083f, -0.689540545f,
   -0.707106781f, -0.707106781f,
   -0.689540545f, -0.724247083f,
   -0.671558955f, -0.740951125f,
   -0.653172843f, -0.757208847f,
   -0.634393284f, -0.773010453f,
   -0.615231591f, -0.788346428f,
   -0.595699304f, -0.803207531f,
   -0.575808191f, -0.817584813f,
   -0.555570233f, -0.831469612f,
   -0.534997620f, -0.844853565f,
   -0.514102744f, -0.857728610f,
   -0.492898192f, -0.870086991f,
   -0.471396737f, -0.881921264f,
   -0.449611330f, -0.893224301f,
   -0.427555093f, -0.903989293f,
   -0.405241314f, -0.914209756f,
   -0.382683432f, -0.923879533f,
   -0.359895037f, -0.932992799f,
   -0.336889853f, -0.941544065f,
   -0.313681740f, -0.949528181f,
   -0.290284677f, -0.956940336f,
   -0.266712757f, -0.963776066f,
   -0.242980180f, -0.970031253f,
   -0.219101240f, -0.975702130f,
   -0.195090322f, -0.980785280f,
   -0.170961889f, -0.985277642f,
   -0.146730474f, -0.989176510f,
   -0.122410675f, -0.992479535f,
   -0.098017140f, -0.995184727f,
   -0.073564564f, -0.997290457f,
   -0.049067674f, -0.998795456f,
   -0.024541229f, -0.999698819f,
   -0.000000000f, -1.000000000f,
    0.024541229f, -0.999698819f,
    0.049067674f, -0.998795456f,
    0.073564564f, -0.997290457f,
    0.098017140f, -0.995184727f,
    0.122410675f, -0.992479535f,
    0.146730474f, -0.989176510f,
    0.170961889f, -0.985277642f,
    0.195090322f, -0.980785280f,
    0.219101240f, -0.975702130f,
    0.242980180f, -0.970031253f,
    0.266712757f, -0.963776066f,
    0.290284677f, -0.956940336f,
    0.313681740f, -0.949528181f,
    0.336889853f, -0.941544065f,
    0.359895037f, -0.932992799f,
    0.382683432f, -0.923879533f,
    0.405241314f, -0.914209756f,
    0.427555093f, -0.903989293f,
    0.449611330f, -0.893224301f,
    0.471396737f, -0.881921264f,
    0.492898192f, -0.870086991f,
    0.514102744f, -0.857728610f,
    0.534997620f, -0.844853565f,
    0.555570233f, -0.831469612f,
    0.575808191f, -0.817584813f,
    0.595699304f, -0.803207531f,
    0.615231591f, -0.788346428f,
    0.634393284f, -0.773010453f,
    0.653172843f, -0.757208847f,
    0.671558955f, -0.740951125f,
    0.689540545f, -0.724247083f,
    0.707106781f, -0.707106781f,
    0.724247083f, -0.689540545f,
    0.740951125f, -0.671558955f,
    0.757208847f, -0.653172843f,
    0.773010453f, -0.634393284f,
    0.788346428f, -0.615231591f,
    0.803207531f, -0.595699304f,
    0.817584813f, -0.575808191f,
    0.831469612f, -0.555570233f,
    0.844853565f, -0.534997620f,
    0.857728610f, -0.514102744f,
    0.870086991f, -0.492898192f,
    0.881921264f, -0.471396737f,
    0.893224301f, -0.449611330f,
    0.903989293f, -0.427555093f,
    0.914209756f, -0.405241314f,
    0.923879533f, -0.382683432f,
    0.932992799f, -0.359895037f,
    0.941544065f, -0.336889853f,
    0.949528181f, -0.313681740f,
    0.956940336f, -0.290284677f,
    0.963776066f, -0.266712757f,
    0.970031253f, -0.242980180f,
    0.975702130f, -0.219101240f,
    0.980785280f, -0.195090322f,
    0.985277642f, -0.170961889f,
    0.989176510f, -0.146730474f,
    0.992479535f, -0.122410675f,
    0.995184727f, -0.098017140f,
    0.997290457f, -0.073564564f,
    0.998795456f, -0.049067674f,
    0.999698819f, -0.024541229f
};

static float sine_table[256] = {
	2048,2098,2148,2198,2248,2298,2348,2398,
	2447,2496,2545,2594,2642,2690,2737,2784,
	2831,2877,2923,2968,3013,3057,3100,3143,
	3185,3226,3267,3307,3346,3385,3423,3459,
	3495,3530,3565,3598,3630,3662,3692,3722,
	3750,3777,3804,3829,3853,3876,3898,3919,
	3939,3958,3975,3992,4007,4021,4034,4045,
	4056,4065,4073,4080,4085,4089,4093,4094,
	4095,4094,4093,4089,4085,4080,4073,4065,
	4056,4045,4034,4021,4007,3992,3975,3958,
	3939,3919,3898,3876,3853,3829,3804,3777,
	3750,3722,3692,3662,3630,3598,3565,3530,
	3495,3459,3423,3385,3346,3307,3267,3226,
	3185,3143,3100,3057,3013,2968,2923,2877,
	2831,2784,2737,2690,2642,2594,2545,2496,
	2447,2398,2348,2298,2248,2198,2148,2098,
	2048,1997,1947,1897,1847,1797,1747,1697,
	1648,1599,1550,1501,1453,1405,1358,1311,
	1264,1218,1172,1127,1082,1038,995,952,
	910,869,828,788,749,710,672,636,
	600,565,530,497,465,433,403,373,
	345,318,291,266,242,219,197,176,
	156,137,120,103,88,74,61,50,
	39,30,22,15,10,6,2,1,
	0,1,2,6,10,15,22,30,
	39,50,61,74,88,103,120,137,
	156,176,197,219,242,266,291,318,
	345,373,403,433,465,497,530,565,
	600,636,672,710,749,788,828,869,
	910,952,995,1038,1082,1127,1172,1218,
	1264,1311,1358,1405,1453,1501,1550,1599,
	1648,1697,1747,1797,1847,1897,1947,1997
};
#endif
